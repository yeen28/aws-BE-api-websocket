// Jenkinsfile
pipeline {
    agent any // 파이프라인을 실행할 Jenkins Agent를 지정합니다.

    // 환경 변수 설정
    environment {
        // 1. AWS 관련 변수
        AWS_REGION               = 'ap-northeast-2' // 본인의 AWS 리전으로 변경
        AWS_ACCOUNT_ID           = '123456789012'   // 본인의 AWS 계정 ID로 변경
        ECR_REPOSITORY_NAME      = 'my-challenge-service' // 생성한 ECR 리포지토리 이름
        
        // 2. ECR 리포지토리 주소 동적 생성
        ECR_REGISTRY             = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        
        // 3. 이미지 이름 및 태그 정의 (Jenkins 빌드 번호 사용)
        IMAGE_NAME               = "${ECR_REGISTRY}/${ECR_REPOSITORY_NAME}:${env.BUILD_NUMBER}"

        // 4. Jenkins에 등록된 AWS Credentials ID
        AWS_CREDENTIALS_ID       = 'aws-credentials' // 사전 준비에서 등록한 Credential ID
    }

    stages {
        // 1단계: Git 소스코드 복제
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/your-repo/your-project.git' // 본인의 GitHub 레포지토리 주소로 변경
                echo "Source code checked out successfully."
            }
        }

        // 2단계: Gradle 빌드
        stage('Gradle Build') {
            steps {
                script {
                    // 실행 권한 부여 후 gradlew로 빌드 실행
                    sh 'chmod +x ./gradlew'
                    sh './gradlew build'
                    echo "Gradle build completed."
                }
            }
        }

        // 3단계: Docker 이미지 빌드
        stage('Build Docker Image') {
            steps {
                script {
                    // Dockerfile을 사용하여 이미지 빌드
                    docker.build(IMAGE_NAME, '.')
                    echo "Docker image built: ${IMAGE_NAME}"
                }
            }
        }

        // 4단계: Amazon ECR에 푸시
        stage('Push to ECR') {
            steps {
                script {
                    // Jenkins Credentials를 사용하여 ECR에 로그인하고 이미지를 푸시
                    docker.withRegistry("https://r${ECR_REGISTRY}", "ecr:${AWS_REGION}:${AWS_CREDENTIALS_ID}") {
                        docker.image(IMAGE_NAME).push()
                        echo "Successfully pushed Docker image to ECR: ${IMAGE_NAME}"
                    }
                }
            }
        }
    }

    // 파이프라인 실행 후 작업 (성공, 실패 등)
    post {
        always {
            // 빌드 에이전트에 남은 로컬 도커 이미지 정리
            script {
                sh "docker rmi ${IMAGE_NAME}"
                echo "Cleaned up local Docker image."
            }
        }
        success {
            // 빌드 성공 시 Slack 알림 (문서 내용 기반) 
            echo "Build successful. Sending notification to Slack..."
            // slackSend channel: '#ci-cd', color: 'good', message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' built successfully. Image: ${IMAGE_NAME}"
        }
        failure {
            // 빌드 실패 시 Slack 알림 (문서 내용 기반) 
            echo "Build failed. Sending notification to Slack..."
            // slackSend channel: '#ci-cd', color: 'danger', message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed. Check logs: ${env.BUILD_URL}"
        }
    }
}
